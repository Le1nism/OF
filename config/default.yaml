
override: ""

logging_level: info
container_manager_port: 7777
kafka_topic_update_interval_secs: 30

wandb:
  online: true
  project_name: OPEN_FAIR
  run_name: My_awesomre_FAIR_run
  kafka_broker_url: kafka:9092
  kafka_consumer_group_id: WANDBER
  kafka_auto_offset_reset: earliest

federated_learning:
  aggregation_strategy: fedavg    # fedavg, fedyogi
  initialization_strategy: xavier   # xavier, he, normal
  aggregation_interval_secs: 30     
  weights_buffer_size: 5
  
security_manager:
  buffer_size: 10000
  batch_size: 32
  learning_rate: 0.001
  epoch_size: 50
  save_model_freq_epochs: 5
  model_saving_path: sm_model.pth
  training_freq_seconds: 1
  initialization_strategy: xavier   # xavier, he, normal
  probe_metrics:
    - RTT
    - INBOUND
    - OUTBOUND
    - CPU
    - MEM
  hidden_dim: 50
  output_dim: 1
  num_layers: 5
  dropout: 0.1
  optimizer: Adam
  mitigation: True
  sm_port: 5001
  layer_norm: True
  

default_vehicle_config:
  kafka_broker: kafka:9092
  mu_anomalies: 157
  mu_normal: 117
  alpha: 0.2
  beta: 1.9
  anomaly_classes: all
  diagnostics_classes: all
  time_emulation: True
  ping_thread_timeout: 5
  ping_host: google.com
  probe_frequency_seconds: 5
  cpu_cores: "0,1,2,3,4,5,6,7,8,9,10,11"
  # cpu_limit: 0.8
  cpu_period: 100000
  cpu_quota: 80000  #calcolo cpu_quota = cpu_period * cpu_limit

# We have 19 (from 0 to 18) anomaly clusters and 15 diagnostics clusters (from 0 to 40)
# Each vehicle can have different anomaly and diagnostics that prioritises when generating data.
# IF not "all" then, the explicit anomaly_classes and diagnostics_classes overwritten for each vehicle
# will be generated at 80%, while the rest will divide the remaining 20%.
# These percentages will normalise or contidion the prior probabilies of each class in the original dataset, which are the following:
  # For anomalies:
  # cluster  probability
  # 0      0.464989   ***
  # 1      0.019147   *
  # 2      0.037746   *
  # 3      0.028993   *
  # 4      0.274617   **
  # 5      0.028993   *
  # 6      0.021882   *
  # 7      0.025711   *
  # 8      0.005470
  # 9      0.008753
  # 10     0.003282
  # 11     0.004376
  # 12     0.006565
  # 13     0.018600
  # 14     0.008206
  # 15     0.012035   *
  # 16     0.006565
  # 17     0.007112
  # 18     0.016958   *

  # For diagnostics:
  # cluster  probability
  # cluster  probability
  # 0      0.176524  ***
  # 1      0.055505 *
  # 2      0.014104 *
  # 3      0.015014 *
  # 4      0.006824
  # 5      0.179254 ***
  # 6      0.047771
  # 7      0.156051 ***
  # 8      0.120564 ***
  # 9      0.148317 ***
  # 10     0.011829 *
  # 11     0.014104 *
  # 12     0.014559 *
  # 13     0.037307 *
  # 14     0.002275
vehicles:
  - angela:
      anomaly_classes: 
        - 0
        - 4
        - 1
        - 5
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
        - 16
        - 17
      diagnostics_classes:
        - 0
        - 5
        - 7
        - 1
        - 2
        - 4
        - 6
        - 14
      cpu_cores: "0,1" 

  - bob:
      anomaly_classes:
        - 0 
        - 4
        - 2
        - 6
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
        - 16
        - 17
      diagnostics_classes:
        - 0
        - 5
        - 8
        - 3
        - 10
        - 4
        - 6
        - 14
      cpu_cores: "2,3" 

  - claude:
      anomaly_classes:
        - 0
        - 15
        - 18
        - 3
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
        - 16
        - 17
      diagnostics_classes:
        - 0
        - 5
        - 9
        - 11
        - 12
        - 13
        - 4
        - 6
        - 14
      cpu_cores: "4,5" 

  - daniel:
      cpu_cores: "6,7" 

  - emily:
      cpu_cores: "8,9"

  - frank:
      cpu_cores: "10,11"


default_consumer_config:
  buffer_size: 5000
  batch_size: 32
  kafka_broker: kafka:9092
  kafka_auto_offset_reset: earliest
  anomaly_classes: all
  diagnostics_classes: all
  weights_push_freq_seconds: 180
  weights_pull_freq_seconds: 180
  learning_rate: 0.001
  initialization_strategy: xavier
  output_dim: 1
  h_dim: 128
  num_layers: 3
  dropout: 0.1
  optimizer: Adam
  training_freq_seconds: 0.5
  epoch_size: 20
  save_model_freq_epochs: 5
  cpu_period: 100000
  cpu_quota: 80000  #calcolo cpu_quota = cpu_period * cpu_limit


anomaly_detection:
  output_dim: 1
  h_dim: 128
  num_layers: 3
  layer_norm: False
  input_dim: 59

  
dashboard:
  port: 5000
  host: 0.0.0.0
  kafka_broker_url: localhost:19092
  kafka_consumer_group_id: kafka-consumer-group-1
  kafka_auto_offset_reset: earliest
  message_cache_len: 20
  ping_thread_timeout: 5
  ping_host: google.com
  probe_frequency_seconds: 5

attack:
  target_port: 80
  duration: 0  # duration is in seconds. 0 means forever...
  packet_size: 1024
  delay: 0.001
  victim_container: zookeeper # be careful what you wish for...
  preconf_attacking_vehicles:
    - daniel
    - frank
  automatic_attack_interval_secs: 5